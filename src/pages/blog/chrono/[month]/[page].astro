---
import Layout from '@layouts/PaginatedBase.astro';
import PostCard from '@components/PostCard.astro';
import { getMergedPosts, type MergedPost } from '@utils/merged-posts';
import ArticlesChrono from '@components/ArticlesChrono.astro';
import {chronoSlug, chronoUnslug} from '@utils/chrono-slug';
import type { Page } from 'astro';
import { postsCount } from '@utils/posts-count';
import MiniArticle from '@components/MiniArticle.astro';
import { getFeaturedImage } from '@utils/get-featured-image';

interface Props {
  page: Page<MergedPost>,
}

export async function getStaticPaths({paginate}) {
  const postsByDate = await postsCount('month');
  const sorter = ([monthA, postsA]: any, [monthB, postsB]: any) => chronoUnslug(monthA).getTime() - chronoUnslug(monthB).getTime();
  return Object.entries(postsByDate).sort(sorter).flatMap(([month, posts]) => paginate(posts, {pageSize: 5, params: {month}}));
}

const { page } = Astro.props;
const { month } = Astro.params;
const numPosts = page.data.length.toLocaleString();
const hero = getFeaturedImage(page.data[0]?.data.images);
const dateDisplay = chronoUnslug(month).toLocaleDateString(navigator.language, {year: 'numeric', month: 'long'});
---

<Layout
  {page}
  title={`Posts from ${dateDisplay}`}
  urlBase={`blog/chrono/${month}`}
  level={2}
  heroBg={hero}
>
  <main>
    <ul class="plain stacked">
      {
        page.data.map((post: any) => (
          <li>
            <!-- <PostCard post={post} brief={true} /> -->
            <MiniArticle article={post} showMetadata={true} showExcerpt={true} />
          </li>
        ))
      }
    </ul>
    <aside>
      <div class="sidebar-widget tags">
        <h4>Posts</h4>
        <ArticlesChrono layout="stacked" level="month" />
      </div>
    </aside>
  </main>
</Layout>

<style>
  main {
    display: grid;
    grid-template-columns: 3fr 1fr;
    grid-gap: var(--grid-gutter);
  }

  aside {
    position: relative;
    display: block;
  }

  .sidebar-widget.tags {
    position: sticky;
    top: var(--sticky-scroll-margin);
  }

  ul.stacked {
    gap: var(--space-l-xl);
  }
</style>
