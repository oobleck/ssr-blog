---
import HeaderLink from './HeaderLink.astro';
import FormattedDate from './FormattedDate.astro';
import type { MergedProject } from '@utils/merged-posts';

interface Props {
  project: MergedProject;
  simple?: boolean;
}

const {project, simple = false} = Astro.props;
const {client, url, category, endDate, draft} = project.data;
const getPropValueEl = (val: any) => {
  switch (true) {
    case /^http/i.test(val):
      return HeaderLink;

    case val instanceof Date || /GMT/.test(val):
      return FormattedDate;

    default:
      return Fragment;
  }
}
---

<dl class:list={[`works-meta-data`, { simple }]}>
  {
    Object.entries({ client, url, completed: endDate, category, draft })
      .filter(([key, value]) => value)
      .map(([prop, value]) => {
        const El: any = getPropValueEl(value);
        return (
          <div class:list={`group project-${prop}`}>
            <dt>
              {prop === 'draft' && value ? (
                <>DRAFT {value}</>
                  <sl-tooltip content="Draft project">
                    <sl-icon name="cone-striped" />
                  </sl-tooltip>
              ) : (
                prop
              )}
            </dt>
            <dd>
              <El
                href={value}
                date={value}
                format={{ month: 'short', year: 'numeric', day: void 0 }}
              >
                {prop !== 'draft' && value}
              </El>
            </dd>
          </div>
        );
      })
  }
</dl>

<style>
  dl {
    --__gap: var(--space-m);

    font-size: var(--step--1);
    text-align: right;

    &:not(.simple) {
      border-block: 1px solid var(--ink-subtle);
      padding-block: var(--space-s);
      margin-block: var(--__gap);
      text-align: unset;

      @container main (width >= 48rem) {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(25%, 1fr));
        gap: var(--space-s);
      }
    }

    :where(dt) {
      display: block;
      margin-block: var(--block-margin);
    }
  }
  dt {
    font-weight: var(--weight-black);
    text-transform: uppercase;
  }
  dd {
    margin-inline: 0;
    text-transform: capitalize;
  }

  .project-draft {
    color: var(--color__danger);

    sl-icon {
      position: relative;
      transform: scale3d(2, 2, 1);
      /* transform-origin: 100% 50%; */
    }
  }
</style>
