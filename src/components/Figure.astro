---
import type { keys } from 'lodash-es';
import Multiline from './Multiline.astro';
import MKD from './MKD.astro';

interface Props {
  id?: string;
  description?: string;
  creditUrl?: string;
  alt?: string;
  layout?: 'plain' | 'fancy';
  [k: string]: any;
}

const { id, description, creditUrl, alt, layout = 'fancy', class: className, ...otherProps } = Astro.props;
const hasImage = Astro.slots.has('default');
const hasCaption = Boolean(description ?? creditUrl ?? alt);
---

{
  hasImage && (
    <figure
      class:list={[`image-figure layout__${layout}`, className]}
      {id}
      {...otherProps}
    >
      <div class="media">
        <slot />
      </div>
      {hasCaption && (
        <figcaption class="caption">
          {(description || alt) && (
            <MKD
              class:list={{ 'ink-contrast': layout === 'fancy' }}
              copy={description ?? alt}
            />
          )}
          {creditUrl && (
            <sl-tooltip content="Image credit">
              <sl-icon-button
                href={creditUrl}
                target="_blank"
                rel="noopener noreferrer"
                name="camera"
                label="Image credit"
                class="attribution ink-contrast"
              />
            </sl-tooltip>
          )}
        </figcaption>
      )}
    </figure>
  )
}

<style>
  .caption {
    position: unset;
    font-size: var(--step--1);
  }

  :not(.layout_fancy) {
    .caption {
      display: inline-flex;
      flex-direction: row;
      justify-content: space-between;
    }

    sl-icon-button {
      all: unset;

      &::part(base) {
        padding: 0.5ch;
        margin-inline-start: 0.5ch;
      }
    }
  }

  figure.layout__fancy {
    position: relative;

    sl-icon-button {
      position: absolute;
      top: 100%;
      left: 100%;
      z-index: var(--layer-1);
      transform: translate(-100%, -100%);

      &::part(base) {
        padding: var(--space-xs);
      }
    }

    .media {
      width: 100%;
      height: 100%;
      overflow: hidden;

      &::after {
        display: grid;
        place-items: center;
        place-content: center;
        content: '+';
        color: var(--gray-0);
        font-size: 1.5em;
        font-weight: var(--weight-semibold);
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        overflow: hidden;
        /* background-color: hsl(0 0 0 / 40%); */
        background-image: var(--vignette);
        backdrop-filter: saturate(66%) brightness(0.6);
        z-index: var(--layer-1);
        opacity: 0;
        padding-top: 50%;
        transition: all 0.2s var(--ease-out-4);
      }

      &:where(:hover, :active, :focus)::after {
        opacity: 1;
        padding-top: 0;
        padding-bottom: 1em;
      }
    }

    .caption {
      position: absolute;
      display: grid;
      align-items: center;
      justify-content: center;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      padding: var(--space-xs);
      background-color: transparent;
      backdrop-filter: saturate(66%) blur(4ch) brightness(0.6);
      font-size: var(--step--1);
      /* line-height: var(--line-height-sm); */
      text-align: center;
      z-index: var(--layer-1);
      visibility: hidden;
      /* opacity: 0; */
      /* transition: opacity 1.618s var(--ease-out-4); */

      :where(p, li, ul) {
        font-size: unset;
        color: inherit;
      }
    }

    &:hover {
      .caption {
        opacity: 1;
        transition-duration: 0.5s;
      }
    }
  }
</style>

<style is:global>
  .image-figure {
    .caption {
      p {
        font-size: unset;
      }
    }
  }
</style>
